From 736ed6cd844a1b779559dc3cf21ee658ab69f85e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Felipe=20Corr=C3=AAa=20da=20Silva=20Sanches?=
 <juca@members.fsf.org>
Date: Fri, 7 Jul 2023 14:16:00 +0100
Subject: [PATCH 1/1] fixes to strings

---
 Lib/fontbakery/profiles/gdef.py        |  2 +-
 Lib/fontbakery/profiles/googlefonts.py | 64 +++++++++++++++-----------
 Lib/fontbakery/profiles/head.py        |  2 +-
 Lib/fontbakery/profiles/hhea.py        |  4 +-
 Lib/fontbakery/profiles/iso15008.py    |  6 +--
 Lib/fontbakery/profiles/name.py        | 10 ++--
 Lib/fontbakery/profiles/os2.py         |  8 ++--
 Lib/fontbakery/profiles/outline.py     |  2 +-
 Lib/fontbakery/profiles/post.py        |  6 +--
 9 files changed, 56 insertions(+), 48 deletions(-)

diff --git a/Lib/fontbakery/profiles/gdef.py b/Lib/fontbakery/profiles/gdef.py
index d247dcca..d6fd75cb 100644
--- a/Lib/fontbakery/profiles/gdef.py
+++ b/Lib/fontbakery/profiles/gdef.py
@@ -72,7 +72,7 @@ def com_google_fonts_check_gdef_spacing_marks(ttFont, config):
             )
         else:
             yield PASS, (
-                "Font does not has spacing glyphs in the GDEF mark glyph class."
+                "Font does not has spacing glyphs" " in the GDEF mark glyph class."
             )
     else:
         yield SKIP, (
diff --git a/Lib/fontbakery/profiles/googlefonts.py b/Lib/fontbakery/profiles/googlefonts.py
index 806f0b8e..0cbb7c42 100644
--- a/Lib/fontbakery/profiles/googlefonts.py
+++ b/Lib/fontbakery/profiles/googlefonts.py
@@ -477,7 +477,7 @@ def com_google_fonts_check_description_min_length(description):
     if len(description) <= 200:
         yield FAIL, Message(
             "too-short",
-            "DESCRIPTION.en_us.html must have size larger than 200 bytes.",
+            "DESCRIPTION.en_us.html must" " have size larger than 200 bytes.",
         )
     else:
         yield PASS, "DESCRIPTION.en_us.html is larger than 200 bytes."
@@ -858,7 +858,7 @@ def com_google_fonts_check_family_equal_numbers_of_glyphs(ttFonts):
             )
     if passed:
         yield PASS, (
-            "All font files in this family have an equal total ammount of glyphs."
+            "All font files in this family have" " an equal total ammount of glyphs."
         )
 
 
@@ -963,7 +963,7 @@ def com_google_fonts_check_fstype(ttFont):
 
         if value & 0b1111110011110001:
             restrictions += (
-                "* There are reserved bits set, which indicates an invalid setting."
+                "* There are reserved bits set," " which indicates an invalid setting."
             )
 
         yield FAIL, Message(
@@ -1810,7 +1810,7 @@ def com_google_fonts_check_has_ttfautohint_params(ttFont):
             passed = True
             yield SKIP, Message(
                 "not-hinted",
-                "Font appears to our heuristic as not hinted using ttfautohint.",
+                "Font appears to our heuristic as" " not hinted using ttfautohint.",
             )
 
     if not passed:
@@ -1846,7 +1846,7 @@ def com_google_fonts_check_old_ttfautohint(ttFont):
     if len(version_strings) == 0:
         yield FAIL, Message(
             "lacks-version-strings",
-            "This font file lacks mandatory version strings in its name table.",
+            "This font file lacks mandatory " "version strings in its name table.",
         )
     elif ttfa_version is None:
         yield INFO, Message(
@@ -2105,10 +2105,10 @@ def com_google_fonts_check_metadata_unique_full_name_values(family_metadata):
     if len(set(fonts.keys())) != len(family_metadata.fonts):
         yield FAIL, Message(
             "duplicated",
-            'Found duplicated "full_name" values in METADATA.pb fonts field.',
+            'Found duplicated "full_name" values' " in METADATA.pb fonts field.",
         )
     else:
-        yield PASS, ('METADATA.pb "fonts" field only has unique "full_name" values.')
+        yield PASS, ('METADATA.pb "fonts" field only has' ' unique "full_name" values.')
 
 
 @check(
@@ -2127,10 +2127,10 @@ def com_google_fonts_check_metadata_unique_weight_style_pairs(family_metadata):
     if len(set(pairs.keys())) != len(family_metadata.fonts):
         yield FAIL, Message(
             "duplicated",
-            "Found duplicated style:weight pair in METADATA.pb fonts field.",
+            "Found duplicated style:weight pair" " in METADATA.pb fonts field.",
         )
     else:
-        yield PASS, ('METADATA.pb "fonts" field only has unique style:weight pairs.')
+        yield PASS, ('METADATA.pb "fonts" field only has' " unique style:weight pairs.")
 
 
 @check(
@@ -2252,7 +2252,7 @@ def com_google_fonts_check_metadata_copyright(family_metadata):
     if fail:
         yield FAIL, Message(
             "inconsistency",
-            "METADATA.pb: Copyright field value is inconsistent across family",
+            "METADATA.pb: Copyright field value" " is inconsistent across family",
         )
     else:
         yield PASS, "Copyright is consistent across family"
@@ -2279,7 +2279,7 @@ def com_google_fonts_check_metadata_familyname(family_metadata):
         )
     else:
         yield PASS, (
-            'METADATA.pb: Family name is the same in all metadata "fonts" items.'
+            "METADATA.pb: Family name is the same" ' in all metadata "fonts" items.'
         )
 
 
@@ -2584,7 +2584,9 @@ def com_google_fonts_check_metadata_valid_name_values(
                 f' correct font name format ("{font_familyname}").',
             )
     if passed:
-        yield PASS, "METADATA.pb font.name field contains font name in right format."
+        yield PASS, (
+            "METADATA.pb font.name field contains" " font name in right format."
+        )
 
 
 @check(
@@ -2641,7 +2643,7 @@ def com_google_fonts_check_metadata_valid_filename_values(font, family_metadata)
         if font_metadata.filename == expected:
             passed = True
             yield PASS, (
-                "METADATA.pb filename field contains font name in right format."
+                "METADATA.pb filename field contains" " font name in right format."
             )
             break
 
@@ -2838,7 +2840,7 @@ def com_google_fonts_check_metadata_reserved_font_name(font_metadata):
         )
     else:
         yield PASS, (
-            'METADATA.pb copyright field does not contain "Reserved Font Name".'
+            "METADATA.pb copyright field" ' does not contain "Reserved Font Name".'
         )
 
 
@@ -2950,7 +2952,7 @@ def com_google_fonts_check_metadata_italic_style(ttFont, font_metadata):
                 )
             else:
                 yield PASS, (
-                    'OK: METADATA.pb font.style "italic" matches font internals.'
+                    'OK: METADATA.pb font.style "italic"' " matches font internals."
                 )
 
 
@@ -2971,7 +2973,9 @@ def com_google_fonts_check_metadata_normal_style(ttFont, font_metadata):
         font_familyname = get_name_entry_strings(ttFont, NameID.FONT_FAMILY_NAME)
         font_fullname = get_name_entry_strings(ttFont, NameID.FULL_FONT_NAME)
         if len(font_familyname) == 0 or len(font_fullname) == 0:
-            yield SKIP, "Font lacks familyname and/or fullname entries in name table."
+            yield SKIP, (
+                "Font lacks familyname and/or" " fullname entries in name table."
+            )
             # FIXME: This is the same SKIP condition as in check/metadata/italic_style
             #        so we definitely need to address them with a common condition!
         else:
@@ -3007,7 +3011,9 @@ def com_google_fonts_check_metadata_normal_style(ttFont, font_metadata):
                     ),
                 )
             else:
-                yield PASS, 'METADATA.pb font.style "normal" matches font internals.'
+                yield PASS, (
+                    'METADATA.pb font.style "normal"' " matches font internals."
+                )
 
 
 @check(
@@ -3234,7 +3240,7 @@ def com_google_fonts_check_metadata_match_weight_postscript(font_metadata):
             pair.append((k, weight))
 
     if not pair:
-        yield FAIL, ("METADATA.pb: Font weight value ({}) is invalid.").format(
+        yield FAIL, ("METADATA.pb: Font weight value ({})" " is invalid.").format(
             font_metadata.weight
         )
     elif not (
@@ -3467,7 +3473,7 @@ def com_google_fonts_check_production_glyphs_similarity(
             f" Google Fonts version:\n{formatted_list}"
         )
     else:
-        yield PASS, ("Glyphs are similar in comparison to the Google Fonts version.")
+        yield PASS, ("Glyphs are similar in" " comparison to the Google Fonts version.")
 
 
 @condition
@@ -4005,7 +4011,7 @@ def com_google_fonts_check_varfont_generate_static(ttFont):
         with tempfile.TemporaryFile() as instance:
             font = mutator.instantiateVariableFont(ttFont, loc)
             font.save(instance)
-            yield PASS, ("fontTools.varLib.mutator generated a static font instance")
+            yield PASS, ("fontTools.varLib.mutator" " generated a static font instance")
     except Exception as e:
         yield FAIL, Message(
             "varlib-mutator",
@@ -4085,7 +4091,7 @@ def com_google_fonts_check_smart_dropout(ttFont):
 
     if "prep" in ttFont and INSTRUCTIONS in ttFont["prep"].program.getBytecode():
         yield PASS, (
-            "'prep' table contains instructions enabling smart dropout control."
+            "'prep' table contains instructions" " enabling smart dropout control."
         )
     else:
         yield FAIL, Message(
@@ -4625,7 +4631,7 @@ def com_google_fonts_check_kerning_for_non_ligated_sequences(
             )
         else:
             yield PASS, (
-                "GPOS table provides kerning info for all non-ligated sequences."
+                "GPOS table provides kerning info for " "all non-ligated sequences."
             )
 
 
@@ -4739,7 +4745,9 @@ def com_google_fonts_check_name_line_breaks(ttFont):
                 f" contains a line-break.",
             )
     if passed:
-        yield PASS, "Name table entries are all single-line (no line-breaks found)."
+        yield PASS, (
+            "Name table entries are all single-line" " (no line-breaks found)."
+        )
 
 
 @check(
@@ -4852,7 +4860,7 @@ def com_google_fonts_check_name_family_name_compliance(ttFont):
                 known_exception = True
                 yield PASS, Message(
                     "known-camelcase-exception",
-                    "Family name is a known exception to the CamelCase rule.",
+                    "Family name is a known exception" " to the CamelCase rule.",
                 )
                 break
 
@@ -4879,7 +4887,7 @@ def com_google_fonts_check_name_family_name_compliance(ttFont):
                 known_exception = True
                 yield PASS, Message(
                     "known-abbreviation-exception",
-                    "Family name is a known exception to the abbreviation rule.",
+                    "Family name is a known exception" " to the abbreviation rule.",
                 )
                 break
 
@@ -5850,7 +5858,7 @@ def com_google_fonts_check_varfont_grade_reflow(ttFont, config):
     # Check kerning here
     if not bad_glyphs and not bad_kerning:
         yield PASS, (
-            "No variations or kern rules vary horizontal advance along the GRAD axis"
+            "No variations or kern rules vary " "horizontal advance along the GRAD axis"
         )
 
 
@@ -6216,7 +6224,7 @@ def com_google_fonts_check_metadata_escaped_strings(metadata_file):
 def com_google_fonts_check_metadata_designer_profiles(family_metadata, config):
     """METADATA.pb: Designers are listed correctly on the Google Fonts catalog?"""
     DESIGNER_INFO_RAW_URL = (
-        "https://raw.githubusercontent.com/google/fonts/master/catalog/designers/{}/"
+        "https://raw.githubusercontent.com/google/" "fonts/master/catalog/designers/{}/"
     )
     from fontbakery.utils import get_DesignerInfoProto_Message
     import requests
@@ -6585,7 +6593,7 @@ def com_google_fonts_check_meta_script_lang_tags(ttFont):
         if "slng" not in ttFont["meta"].data:
             yield FAIL, Message(
                 "missing-slng-tag",
-                "Please specify which languages and scripts this font supports.",
+                "Please specify which languages and scripts" " this font supports.",
             )
         else:
             yield INFO, Message("slng-tag", f"{ttFont['meta'].data['slng']}")
diff --git a/Lib/fontbakery/profiles/head.py b/Lib/fontbakery/profiles/head.py
index 8e6f3552..86483609 100644
--- a/Lib/fontbakery/profiles/head.py
+++ b/Lib/fontbakery/profiles/head.py
@@ -106,7 +106,7 @@ def parse_version_string(name: str) -> float:
 
     if version_string is None:
         raise ValueError(
-            "The version string didn't contain a number of the format `major.minor`."
+            "The version string didn't contain a" " number of the format `major.minor`."
         )
 
     return fractions.Fraction(version_string.group(1))
diff --git a/Lib/fontbakery/profiles/hhea.py b/Lib/fontbakery/profiles/hhea.py
index a51586f2..74d93c41 100644
--- a/Lib/fontbakery/profiles/hhea.py
+++ b/Lib/fontbakery/profiles/hhea.py
@@ -36,7 +36,7 @@ def com_google_fonts_check_maxadvancewidth(ttFont):
         )
     else:
         yield PASS, (
-            "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables."
+            "MaxAdvanceWidth is consistent" " with values in the Hmtx and Hhea tables."
         )
 
 
@@ -94,5 +94,5 @@ def com_google_fonts_check_caret_slope(ttFont):
         )
     else:
         yield PASS, (
-            "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle."
+            "hhea.caretSlopeRise and hhea.caretSlopeRun" " match with post.italicAngle."
         )
diff --git a/Lib/fontbakery/profiles/iso15008.py b/Lib/fontbakery/profiles/iso15008.py
index 5f40b7e9..abe171fc 100644
--- a/Lib/fontbakery/profiles/iso15008.py
+++ b/Lib/fontbakery/profiles/iso15008.py
@@ -203,7 +203,7 @@ def com_google_fonts_check_iso15008_intercharacter_spacing(font, ttFont):
     if l_l is None:
         yield FAIL, Message(
             "glyph-not-present",
-            "There was no 'l' glyph in the font, so the spacing could not be tested",
+            "There was no 'l' glyph in the font," " so the spacing could not be tested",
         )
         return
     if 1.5 <= (l_l / width) <= 2.4:
@@ -231,7 +231,7 @@ def com_google_fonts_check_iso15008_intercharacter_spacing(font, ttFont):
     if l_v is None:
         yield FAIL, Message(
             "glyph-not-present",
-            "There was no 'v' glyph in the font, so the spacing could not be tested",
+            "There was no 'v' glyph in the font," " so the spacing could not be tested",
         )
         return
 
@@ -276,7 +276,7 @@ def com_google_fonts_check_iso15008_interword_spacing(font, ttFont):
     if len(l_intersections) < 2:
         yield FAIL, Message(
             "glyph-not-present",
-            "There was no 'l' glyph in the font, so the spacing could not be tested",
+            "There was no 'l' glyph in the font," " so the spacing could not be tested",
         )
         return
 
diff --git a/Lib/fontbakery/profiles/name.py b/Lib/fontbakery/profiles/name.py
index 09c26160..547d47de 100644
--- a/Lib/fontbakery/profiles/name.py
+++ b/Lib/fontbakery/profiles/name.py
@@ -292,7 +292,7 @@ def com_google_fonts_check_monospace(ttFont, glyph_metrics_stats):
             )
         if passed:
             yield PASS, Message(
-                "good", "Font is not monospaced and all related metadata look good."
+                "good", "Font is not monospaced and" " all related metadata look good."
             )
 
 
@@ -439,7 +439,7 @@ def com_google_fonts_check_family_naming_recommendations(ttFont):
                 {
                     "field": "PostScript Name",
                     "value": string,
-                    "rec": ("May contain only a-zA-Z0-9 characters and an hyphen."),
+                    "rec": ("May contain only a-zA-Z0-9" " characters and an hyphen."),
                 }
             )
         if string.count("-") > 1:
@@ -447,7 +447,7 @@ def com_google_fonts_check_family_naming_recommendations(ttFont):
                 {
                     "field": "Postscript Name",
                     "value": string,
-                    "rec": ("May contain not more than a single hyphen"),
+                    "rec": ("May contain not more" " than a single hyphen"),
                 }
             )
 
@@ -594,7 +594,7 @@ def com_adobe_fonts_check_name_postscript_name_consistency(ttFont):
         )
     else:
         yield PASS, (
-            'Entries in the "name" table for ID 6 (PostScript name) are consistent.'
+            'Entries in the "name" table for ID 6 ' "(PostScript name) are consistent."
         )
 
 
@@ -775,7 +775,7 @@ def com_google_fonts_check_name_italic_names(ttFont, style):
             if not get_name(NameID.TYPOGRAPHIC_SUBFAMILY_NAME).endswith("Italic"):
                 yield FAIL, Message(
                     "bad-typographicsubfamilyname",
-                    "Name ID 17 (Typographic Subfamily Name) must contain 'Italic'.",
+                    "Name ID 17 (Typographic Subfamily Name)" " must contain 'Italic'.",
                 )
                 passed = False
 
diff --git a/Lib/fontbakery/profiles/os2.py b/Lib/fontbakery/profiles/os2.py
index 980e2f24..2802f370 100644
--- a/Lib/fontbakery/profiles/os2.py
+++ b/Lib/fontbakery/profiles/os2.py
@@ -156,7 +156,7 @@ def com_google_fonts_check_xavgcharwidth(ttFont):
         if not all(character in glyph_order for character in weightFactors):
             yield FAIL, Message(
                 "missing-glyphs",
-                "Font is missing the required latin lowercase letters and/or space.",
+                "Font is missing the required" " latin lowercase letters and/or space.",
             )
             return
 
@@ -223,7 +223,7 @@ def com_adobe_fonts_check_fsselection_matches_macstyle(ttFont):
         failed = True
         yield FAIL, Message(
             "fsselection-macstyle-bold",
-            "The OS/2.fsSelection and head.macStyle bold settings do not match.",
+            "The OS/2.fsSelection and head.macStyle " "bold settings do not match.",
         )
     head_italic = (ttFont["head"].macStyle & MacStyle.ITALIC) != 0
     os2_italic = (ttFont["OS/2"].fsSelection & FsSelection.ITALIC) != 0
@@ -231,11 +231,11 @@ def com_adobe_fonts_check_fsselection_matches_macstyle(ttFont):
         failed = True
         yield FAIL, Message(
             "fsselection-macstyle-italic",
-            "The OS/2.fsSelection and head.macStyle italic settings do not match.",
+            "The OS/2.fsSelection and head.macStyle " "italic settings do not match.",
         )
     if not failed:
         yield PASS, (
-            "The OS/2.fsSelection and head.macStyle bold and italic settings match."
+            "The OS/2.fsSelection and head.macStyle " "bold and italic settings match."
         )
 
 
diff --git a/Lib/fontbakery/profiles/outline.py b/Lib/fontbakery/profiles/outline.py
index e86c1111..5de6c41b 100644
--- a/Lib/fontbakery/profiles/outline.py
+++ b/Lib/fontbakery/profiles/outline.py
@@ -144,7 +144,7 @@ def com_google_fonts_check_outline_short_segments(ttFont, outlines_dict, config)
                 prev_was_line = len(seg) == 2
         if len(warnings) > FALSE_POSITIVE_CUTOFF:
             yield PASS, (
-                "So many short segments were found that this was probably by design."
+                "So many short segments were found" " that this was probably by design."
             )
             return
 
diff --git a/Lib/fontbakery/profiles/post.py b/Lib/fontbakery/profiles/post.py
index 53c4acba..de6d4b71 100644
--- a/Lib/fontbakery/profiles/post.py
+++ b/Lib/fontbakery/profiles/post.py
@@ -104,7 +104,7 @@ def com_google_fonts_check_post_table_version(ttFont):
     elif formatType == 2.5:
         yield FAIL, Message(
             "post-table-version",
-            "Post format 2.5 was deprecated in OpenType 1.3 and should not be used.",
+            "Post format 2.5 was deprecated in OpenType 1.3 and should" "not be used.",
         )
     elif formatType == 4:
         yield FAIL, Message(
@@ -282,14 +282,14 @@ def com_google_fonts_check_italic_angle(ttFont, style):
             passed = False
             yield FAIL, Message(
                 "zero-italic",
-                ("Font is italic, so post.italicAngle should be non-zero."),
+                ("Font is italic, so post.italicAngle" " should be non-zero."),
             )
     else:
         if ttFont["post"].italicAngle != 0:
             passed = False
             yield FAIL, Message(
                 "non-zero-upright",
-                ("Font is not italic, so post.italicAngle should be equal to zero."),
+                ("Font is not italic, so post.italicAngle" " should be equal to zero."),
             )
 
     if bad_glyphs:
-- 
2.30.2

